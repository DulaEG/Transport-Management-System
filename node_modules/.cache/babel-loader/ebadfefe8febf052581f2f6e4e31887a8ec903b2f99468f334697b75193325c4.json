{"ast":null,"code":"// services/tripBookingService.js\nimport axios from \"axios\";\nimport { baseUrl } from \"../utils/constants\";\nconst BASE_URL = baseUrl;\n\n// Axios instance\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Create a new trip booking\nexport const createTripBooking = async tripData => {\n  try {\n    const user = JSON.parse(localStorage.getItem(\"currentUser\"));\n    const response = await api.post(\"/trips\", {\n      ...tripData,\n      userId: user[\"_id\"]\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Get all trip bookings\nexport const getAllTripBookings = async () => {\n  try {\n    const response = await api.get(\"/trips\");\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Get a trip booking by ID\nexport const getTripBookingById = async id => {\n  try {\n    const response = await api.get(`/trips/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Update a trip booking by ID\nexport const updateTripBooking = async (id, tripData) => {\n  try {\n    const response = await api.put(`/trips/${id}`, tripData);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Delete (soft delete) a trip booking by ID\nexport const deleteTripBooking = async id => {\n  try {\n    const response = await api.delete(`/trips/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};","map":{"version":3,"names":["axios","baseUrl","BASE_URL","api","create","baseURL","headers","createTripBooking","tripData","user","JSON","parse","localStorage","getItem","response","post","userId","data","error","Error","getAllTripBookings","get","getTripBookingById","id","updateTripBooking","put","deleteTripBooking","delete"],"sources":["C:/Users/dulas/Desktop/Transport-Management-System/frontend/src/services/bookingService.js"],"sourcesContent":["// services/tripBookingService.js\nimport axios from \"axios\";\nimport { baseUrl } from \"../utils/constants\";\n\nconst BASE_URL = baseUrl;\n\n// Axios instance\nconst api = axios.create({\n  baseURL: BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n\n// Create a new trip booking\nexport const createTripBooking = async (tripData) => {\n  try {\n    const user = JSON.parse(localStorage.getItem(\"currentUser\"));\n    const response = await api.post(\"/trips\", {\n      ...tripData,\n      userId: user[\"_id\"],\n    });\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Get all trip bookings\nexport const getAllTripBookings = async () => {\n  try {\n    const response = await api.get(\"/trips\");\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Get a trip booking by ID\nexport const getTripBookingById = async (id) => {\n  try {\n    const response = await api.get(`/trips/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Update a trip booking by ID\nexport const updateTripBooking = async (id, tripData) => {\n  try {\n    const response = await api.put(`/trips/${id}`, tripData);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n\n// Delete (soft delete) a trip booking by ID\nexport const deleteTripBooking = async (id) => {\n  try {\n    const response = await api.delete(`/trips/${id}`);\n    return response.data;\n  } catch (error) {\n    throw error.response ? error.response.data : new Error(\"Server Error\");\n  }\n};\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,oBAAoB;AAE5C,MAAMC,QAAQ,GAAGD,OAAO;;AAExB;AACA,MAAME,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEH,QAAQ;EACjBI,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,iBAAiB,GAAG,MAAOC,QAAQ,IAAK;EACnD,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC5D,MAAMC,QAAQ,GAAG,MAAMX,GAAG,CAACY,IAAI,CAAC,QAAQ,EAAE;MACxC,GAAGP,QAAQ;MACXQ,MAAM,EAAEP,IAAI,CAAC,KAAK;IACpB,CAAC,CAAC;IACF,OAAOK,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAG,IAAIE,KAAK,CAAC,cAAc,CAAC;EACxE;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMX,GAAG,CAACkB,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOP,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAG,IAAIE,KAAK,CAAC,cAAc,CAAC;EACxE;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,kBAAkB,GAAG,MAAOC,EAAE,IAAK;EAC9C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMX,GAAG,CAACkB,GAAG,CAAC,UAAUE,EAAE,EAAE,CAAC;IAC9C,OAAOT,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAG,IAAIE,KAAK,CAAC,cAAc,CAAC;EACxE;AACF,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAG,MAAAA,CAAOD,EAAE,EAAEf,QAAQ,KAAK;EACvD,IAAI;IACF,MAAMM,QAAQ,GAAG,MAAMX,GAAG,CAACsB,GAAG,CAAC,UAAUF,EAAE,EAAE,EAAEf,QAAQ,CAAC;IACxD,OAAOM,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAG,IAAIE,KAAK,CAAC,cAAc,CAAC;EACxE;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAG,MAAOH,EAAE,IAAK;EAC7C,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMX,GAAG,CAACwB,MAAM,CAAC,UAAUJ,EAAE,EAAE,CAAC;IACjD,OAAOT,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,MAAMA,KAAK,CAACJ,QAAQ,GAAGI,KAAK,CAACJ,QAAQ,CAACG,IAAI,GAAG,IAAIE,KAAK,CAAC,cAAc,CAAC;EACxE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}